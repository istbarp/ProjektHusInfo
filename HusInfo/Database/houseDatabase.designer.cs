#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HusInfo.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dmaa0912JesperH")]
	public partial class houseDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClassification(Classification instance);
    partial void UpdateClassification(Classification instance);
    partial void DeleteClassification(Classification instance);
    partial void InsertHouse(House instance);
    partial void UpdateHouse(House instance);
    partial void DeleteHouse(House instance);
    partial void InsertLogin(Login instance);
    partial void UpdateLogin(Login instance);
    partial void DeleteLogin(Login instance);
    partial void InsertOffer(Offer instance);
    partial void UpdateOffer(Offer instance);
    partial void DeleteOffer(Offer instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    #endregion
		
		public houseDatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["dmaa0912JesperHConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public houseDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public houseDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public houseDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public houseDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Classification> Classifications
		{
			get
			{
				return this.GetTable<Classification>();
			}
		}
		
		public System.Data.Linq.Table<House> Houses
		{
			get
			{
				return this.GetTable<House>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<Offer> Offers
		{
			get
			{
				return this.GetTable<Offer>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Classification")]
	public partial class Classification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _problem;
		
		private System.Data.Linq.Binary _problemPicture;
		
		private string _type;
		
		private System.Nullable<int> _reportId;
		
		private EntitySet<Offer> _Offers;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnproblemChanging(string value);
    partial void OnproblemChanged();
    partial void OnproblemPictureChanging(System.Data.Linq.Binary value);
    partial void OnproblemPictureChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnreportIdChanging(System.Nullable<int> value);
    partial void OnreportIdChanged();
    #endregion
		
		public Classification()
		{
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problem", DbType="NVarChar(MAX)")]
		public string problem
		{
			get
			{
				return this._problem;
			}
			set
			{
				if ((this._problem != value))
				{
					this.OnproblemChanging(value);
					this.SendPropertyChanging();
					this._problem = value;
					this.SendPropertyChanged("problem");
					this.OnproblemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problemPicture", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary problemPicture
		{
			get
			{
				return this._problemPicture;
			}
			set
			{
				if ((this._problemPicture != value))
				{
					this.OnproblemPictureChanging(value);
					this.SendPropertyChanging();
					this._problemPicture = value;
					this.SendPropertyChanged("problemPicture");
					this.OnproblemPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(MAX)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reportId", DbType="Int")]
		public System.Nullable<int> reportId
		{
			get
			{
				return this._reportId;
			}
			set
			{
				if ((this._reportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreportIdChanging(value);
					this.SendPropertyChanging();
					this._reportId = value;
					this.SendPropertyChanged("reportId");
					this.OnreportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classification_Offer", Storage="_Offers", ThisKey="id", OtherKey="classificationId")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_Classification", Storage="_Report", ThisKey="reportId", OtherKey="id", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.Classifications.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.Classifications.Add(this);
						this._reportId = value.id;
					}
					else
					{
						this._reportId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Classification = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Classification = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.House")]
	public partial class House : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _address;
		
		private System.Nullable<double> _basementAreal;
		
		private System.Nullable<double> _bruttoprice;
		
		private System.Nullable<int> _buildingYear;
		
		private System.Nullable<double> _cashPrice;
		
		private string _city;
		
		private System.Nullable<double> _distToSchool;
		
		private System.Nullable<double> _distToShopping;
		
		private string _energyMark;
		
		private System.Nullable<int> _floorLevels;
		
		private System.Nullable<double> _garageKvm;
		
		private System.Nullable<double> _groundAreal;
		
		private System.Nullable<double> _kvmPrice;
		
		private System.Nullable<double> _livingAreal;
		
		private System.Nullable<double> _nettoPrice;
		
		private System.Nullable<int> _rooms;
		
		private System.Nullable<int> _toilets;
		
		private string _webLink;
		
		private System.Nullable<int> _zipCode;
		
		private System.Nullable<int> _loginId;
		
		private EntitySet<Report> _Reports;
		
		private EntityRef<Login> _Login;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnbasementArealChanging(System.Nullable<double> value);
    partial void OnbasementArealChanged();
    partial void OnbruttopriceChanging(System.Nullable<double> value);
    partial void OnbruttopriceChanged();
    partial void OnbuildingYearChanging(System.Nullable<int> value);
    partial void OnbuildingYearChanged();
    partial void OncashPriceChanging(System.Nullable<double> value);
    partial void OncashPriceChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OndistToSchoolChanging(System.Nullable<double> value);
    partial void OndistToSchoolChanged();
    partial void OndistToShoppingChanging(System.Nullable<double> value);
    partial void OndistToShoppingChanged();
    partial void OnenergyMarkChanging(string value);
    partial void OnenergyMarkChanged();
    partial void OnfloorLevelsChanging(System.Nullable<int> value);
    partial void OnfloorLevelsChanged();
    partial void OngarageKvmChanging(System.Nullable<double> value);
    partial void OngarageKvmChanged();
    partial void OngroundArealChanging(System.Nullable<double> value);
    partial void OngroundArealChanged();
    partial void OnkvmPriceChanging(System.Nullable<double> value);
    partial void OnkvmPriceChanged();
    partial void OnlivingArealChanging(System.Nullable<double> value);
    partial void OnlivingArealChanged();
    partial void OnnettoPriceChanging(System.Nullable<double> value);
    partial void OnnettoPriceChanged();
    partial void OnroomsChanging(System.Nullable<int> value);
    partial void OnroomsChanged();
    partial void OntoiletsChanging(System.Nullable<int> value);
    partial void OntoiletsChanged();
    partial void OnwebLinkChanging(string value);
    partial void OnwebLinkChanged();
    partial void OnzipCodeChanging(System.Nullable<int> value);
    partial void OnzipCodeChanged();
    partial void OnloginIdChanging(System.Nullable<int> value);
    partial void OnloginIdChanged();
    #endregion
		
		public House()
		{
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._Login = default(EntityRef<Login>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(MAX)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_basementAreal", DbType="Float")]
		public System.Nullable<double> basementAreal
		{
			get
			{
				return this._basementAreal;
			}
			set
			{
				if ((this._basementAreal != value))
				{
					this.OnbasementArealChanging(value);
					this.SendPropertyChanging();
					this._basementAreal = value;
					this.SendPropertyChanged("basementAreal");
					this.OnbasementArealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bruttoprice", DbType="Float")]
		public System.Nullable<double> bruttoprice
		{
			get
			{
				return this._bruttoprice;
			}
			set
			{
				if ((this._bruttoprice != value))
				{
					this.OnbruttopriceChanging(value);
					this.SendPropertyChanging();
					this._bruttoprice = value;
					this.SendPropertyChanged("bruttoprice");
					this.OnbruttopriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buildingYear", DbType="Int")]
		public System.Nullable<int> buildingYear
		{
			get
			{
				return this._buildingYear;
			}
			set
			{
				if ((this._buildingYear != value))
				{
					this.OnbuildingYearChanging(value);
					this.SendPropertyChanging();
					this._buildingYear = value;
					this.SendPropertyChanged("buildingYear");
					this.OnbuildingYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cashPrice", DbType="Float")]
		public System.Nullable<double> cashPrice
		{
			get
			{
				return this._cashPrice;
			}
			set
			{
				if ((this._cashPrice != value))
				{
					this.OncashPriceChanging(value);
					this.SendPropertyChanging();
					this._cashPrice = value;
					this.SendPropertyChanged("cashPrice");
					this.OncashPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="NVarChar(MAX)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distToSchool", DbType="Float")]
		public System.Nullable<double> distToSchool
		{
			get
			{
				return this._distToSchool;
			}
			set
			{
				if ((this._distToSchool != value))
				{
					this.OndistToSchoolChanging(value);
					this.SendPropertyChanging();
					this._distToSchool = value;
					this.SendPropertyChanged("distToSchool");
					this.OndistToSchoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distToShopping", DbType="Float")]
		public System.Nullable<double> distToShopping
		{
			get
			{
				return this._distToShopping;
			}
			set
			{
				if ((this._distToShopping != value))
				{
					this.OndistToShoppingChanging(value);
					this.SendPropertyChanging();
					this._distToShopping = value;
					this.SendPropertyChanged("distToShopping");
					this.OndistToShoppingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_energyMark", DbType="NVarChar(MAX)")]
		public string energyMark
		{
			get
			{
				return this._energyMark;
			}
			set
			{
				if ((this._energyMark != value))
				{
					this.OnenergyMarkChanging(value);
					this.SendPropertyChanging();
					this._energyMark = value;
					this.SendPropertyChanged("energyMark");
					this.OnenergyMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_floorLevels", DbType="Int")]
		public System.Nullable<int> floorLevels
		{
			get
			{
				return this._floorLevels;
			}
			set
			{
				if ((this._floorLevels != value))
				{
					this.OnfloorLevelsChanging(value);
					this.SendPropertyChanging();
					this._floorLevels = value;
					this.SendPropertyChanged("floorLevels");
					this.OnfloorLevelsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_garageKvm", DbType="Float")]
		public System.Nullable<double> garageKvm
		{
			get
			{
				return this._garageKvm;
			}
			set
			{
				if ((this._garageKvm != value))
				{
					this.OngarageKvmChanging(value);
					this.SendPropertyChanging();
					this._garageKvm = value;
					this.SendPropertyChanged("garageKvm");
					this.OngarageKvmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groundAreal", DbType="Float")]
		public System.Nullable<double> groundAreal
		{
			get
			{
				return this._groundAreal;
			}
			set
			{
				if ((this._groundAreal != value))
				{
					this.OngroundArealChanging(value);
					this.SendPropertyChanging();
					this._groundAreal = value;
					this.SendPropertyChanged("groundAreal");
					this.OngroundArealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kvmPrice", DbType="Float")]
		public System.Nullable<double> kvmPrice
		{
			get
			{
				return this._kvmPrice;
			}
			set
			{
				if ((this._kvmPrice != value))
				{
					this.OnkvmPriceChanging(value);
					this.SendPropertyChanging();
					this._kvmPrice = value;
					this.SendPropertyChanged("kvmPrice");
					this.OnkvmPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_livingAreal", DbType="Float")]
		public System.Nullable<double> livingAreal
		{
			get
			{
				return this._livingAreal;
			}
			set
			{
				if ((this._livingAreal != value))
				{
					this.OnlivingArealChanging(value);
					this.SendPropertyChanging();
					this._livingAreal = value;
					this.SendPropertyChanged("livingAreal");
					this.OnlivingArealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nettoPrice", DbType="Float")]
		public System.Nullable<double> nettoPrice
		{
			get
			{
				return this._nettoPrice;
			}
			set
			{
				if ((this._nettoPrice != value))
				{
					this.OnnettoPriceChanging(value);
					this.SendPropertyChanging();
					this._nettoPrice = value;
					this.SendPropertyChanged("nettoPrice");
					this.OnnettoPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rooms", DbType="Int")]
		public System.Nullable<int> rooms
		{
			get
			{
				return this._rooms;
			}
			set
			{
				if ((this._rooms != value))
				{
					this.OnroomsChanging(value);
					this.SendPropertyChanging();
					this._rooms = value;
					this.SendPropertyChanged("rooms");
					this.OnroomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toilets", DbType="Int")]
		public System.Nullable<int> toilets
		{
			get
			{
				return this._toilets;
			}
			set
			{
				if ((this._toilets != value))
				{
					this.OntoiletsChanging(value);
					this.SendPropertyChanging();
					this._toilets = value;
					this.SendPropertyChanged("toilets");
					this.OntoiletsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_webLink", DbType="NVarChar(MAX)")]
		public string webLink
		{
			get
			{
				return this._webLink;
			}
			set
			{
				if ((this._webLink != value))
				{
					this.OnwebLinkChanging(value);
					this.SendPropertyChanging();
					this._webLink = value;
					this.SendPropertyChanged("webLink");
					this.OnwebLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zipCode", DbType="Int")]
		public System.Nullable<int> zipCode
		{
			get
			{
				return this._zipCode;
			}
			set
			{
				if ((this._zipCode != value))
				{
					this.OnzipCodeChanging(value);
					this.SendPropertyChanging();
					this._zipCode = value;
					this.SendPropertyChanged("zipCode");
					this.OnzipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loginId", DbType="Int")]
		public System.Nullable<int> loginId
		{
			get
			{
				return this._loginId;
			}
			set
			{
				if ((this._loginId != value))
				{
					if (this._Login.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnloginIdChanging(value);
					this.SendPropertyChanging();
					this._loginId = value;
					this.SendPropertyChanged("loginId");
					this.OnloginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="House_Report", Storage="_Reports", ThisKey="id", OtherKey="houseId")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_House", Storage="_Login", ThisKey="loginId", OtherKey="id", IsForeignKey=true)]
		public Login Login
		{
			get
			{
				return this._Login.Entity;
			}
			set
			{
				Login previousValue = this._Login.Entity;
				if (((previousValue != value) 
							|| (this._Login.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Login.Entity = null;
						previousValue.Houses.Remove(this);
					}
					this._Login.Entity = value;
					if ((value != null))
					{
						value.Houses.Add(this);
						this._loginId = value.id;
					}
					else
					{
						this._loginId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Login");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.House = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.House = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Login")]
	public partial class Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _company;
		
		private string _password;
		
		private System.Nullable<int> _phoneNumber;
		
		private string _username;
		
		private string _personType;
		
		private EntitySet<House> _Houses;
		
		private EntitySet<Offer> _Offers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncompanyChanging(string value);
    partial void OncompanyChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnphoneNumberChanging(System.Nullable<int> value);
    partial void OnphoneNumberChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpersonTypeChanging(string value);
    partial void OnpersonTypeChanged();
    #endregion
		
		public Login()
		{
			this._Houses = new EntitySet<House>(new Action<House>(this.attach_Houses), new Action<House>(this.detach_Houses));
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_company", DbType="NVarChar(MAX)")]
		public string company
		{
			get
			{
				return this._company;
			}
			set
			{
				if ((this._company != value))
				{
					this.OncompanyChanging(value);
					this.SendPropertyChanging();
					this._company = value;
					this.SendPropertyChanged("company");
					this.OncompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(MAX)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="Int")]
		public System.Nullable<int> phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(MAX)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personType", DbType="NVarChar(MAX)")]
		public string personType
		{
			get
			{
				return this._personType;
			}
			set
			{
				if ((this._personType != value))
				{
					this.OnpersonTypeChanging(value);
					this.SendPropertyChanging();
					this._personType = value;
					this.SendPropertyChanged("personType");
					this.OnpersonTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_House", Storage="_Houses", ThisKey="id", OtherKey="loginId")]
		public EntitySet<House> Houses
		{
			get
			{
				return this._Houses;
			}
			set
			{
				this._Houses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_Offer", Storage="_Offers", ThisKey="id", OtherKey="loginId")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.Login = this;
		}
		
		private void detach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.Login = null;
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Login = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Login = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Offer")]
	public partial class Offer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _loginId;
		
		private System.Nullable<int> _classificationId;
		
		private System.Nullable<double> _price;
		
		private EntityRef<Classification> _Classification;
		
		private EntityRef<Login> _Login;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnloginIdChanging(System.Nullable<int> value);
    partial void OnloginIdChanged();
    partial void OnclassificationIdChanging(System.Nullable<int> value);
    partial void OnclassificationIdChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    #endregion
		
		public Offer()
		{
			this._Classification = default(EntityRef<Classification>);
			this._Login = default(EntityRef<Login>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loginId", DbType="Int")]
		public System.Nullable<int> loginId
		{
			get
			{
				return this._loginId;
			}
			set
			{
				if ((this._loginId != value))
				{
					if (this._Login.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnloginIdChanging(value);
					this.SendPropertyChanging();
					this._loginId = value;
					this.SendPropertyChanged("loginId");
					this.OnloginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classificationId", DbType="Int")]
		public System.Nullable<int> classificationId
		{
			get
			{
				return this._classificationId;
			}
			set
			{
				if ((this._classificationId != value))
				{
					if (this._Classification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassificationIdChanging(value);
					this.SendPropertyChanging();
					this._classificationId = value;
					this.SendPropertyChanged("classificationId");
					this.OnclassificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classification_Offer", Storage="_Classification", ThisKey="classificationId", OtherKey="id", IsForeignKey=true)]
		public Classification Classification
		{
			get
			{
				return this._Classification.Entity;
			}
			set
			{
				Classification previousValue = this._Classification.Entity;
				if (((previousValue != value) 
							|| (this._Classification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Classification.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._Classification.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._classificationId = value.id;
					}
					else
					{
						this._classificationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Classification");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_Offer", Storage="_Login", ThisKey="loginId", OtherKey="id", IsForeignKey=true)]
		public Login Login
		{
			get
			{
				return this._Login.Entity;
			}
			set
			{
				Login previousValue = this._Login.Entity;
				if (((previousValue != value) 
							|| (this._Login.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Login.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._Login.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._loginId = value.id;
					}
					else
					{
						this._loginId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Login");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Report")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _houseId;
		
		private EntitySet<Classification> _Classifications;
		
		private EntityRef<House> _House;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnhouseIdChanging(System.Nullable<int> value);
    partial void OnhouseIdChanged();
    #endregion
		
		public Report()
		{
			this._Classifications = new EntitySet<Classification>(new Action<Classification>(this.attach_Classifications), new Action<Classification>(this.detach_Classifications));
			this._House = default(EntityRef<House>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_houseId", DbType="Int")]
		public System.Nullable<int> houseId
		{
			get
			{
				return this._houseId;
			}
			set
			{
				if ((this._houseId != value))
				{
					if (this._House.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhouseIdChanging(value);
					this.SendPropertyChanging();
					this._houseId = value;
					this.SendPropertyChanged("houseId");
					this.OnhouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_Classification", Storage="_Classifications", ThisKey="id", OtherKey="reportId")]
		public EntitySet<Classification> Classifications
		{
			get
			{
				return this._Classifications;
			}
			set
			{
				this._Classifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="House_Report", Storage="_House", ThisKey="houseId", OtherKey="id", IsForeignKey=true)]
		public House House
		{
			get
			{
				return this._House.Entity;
			}
			set
			{
				House previousValue = this._House.Entity;
				if (((previousValue != value) 
							|| (this._House.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._House.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._House.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._houseId = value.id;
					}
					else
					{
						this._houseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("House");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classifications(Classification entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_Classifications(Classification entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
	}
}
#pragma warning restore 1591
