#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HusInfo
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class houseDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEntrepreneur(Entrepreneur instance);
    partial void UpdateEntrepreneur(Entrepreneur instance);
    partial void DeleteEntrepreneur(Entrepreneur instance);
    partial void InsertHouse(House instance);
    partial void UpdateHouse(House instance);
    partial void DeleteHouse(House instance);
    partial void InsertK0(K0 instance);
    partial void UpdateK0(K0 instance);
    partial void DeleteK0(K0 instance);
    partial void InsertK1(K1 instance);
    partial void UpdateK1(K1 instance);
    partial void DeleteK1(K1 instance);
    partial void InsertK2(K2 instance);
    partial void UpdateK2(K2 instance);
    partial void DeleteK2(K2 instance);
    partial void InsertK3(K3 instance);
    partial void UpdateK3(K3 instance);
    partial void DeleteK3(K3 instance);
    partial void InsertOffer(Offer instance);
    partial void UpdateOffer(Offer instance);
    partial void DeleteOffer(Offer instance);
    partial void InsertRealEstateAgent(RealEstateAgent instance);
    partial void UpdateRealEstateAgent(RealEstateAgent instance);
    partial void DeleteRealEstateAgent(RealEstateAgent instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertUn(Un instance);
    partial void UpdateUn(Un instance);
    partial void DeleteUn(Un instance);
    #endregion
		
		public houseDatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataSourceConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public houseDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public houseDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public houseDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public houseDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Entrepreneur> Entrepreneurs
		{
			get
			{
				return this.GetTable<Entrepreneur>();
			}
		}
		
		public System.Data.Linq.Table<House> Houses
		{
			get
			{
				return this.GetTable<House>();
			}
		}
		
		public System.Data.Linq.Table<K0> K0s
		{
			get
			{
				return this.GetTable<K0>();
			}
		}
		
		public System.Data.Linq.Table<K1> K1s
		{
			get
			{
				return this.GetTable<K1>();
			}
		}
		
		public System.Data.Linq.Table<K2> K2s
		{
			get
			{
				return this.GetTable<K2>();
			}
		}
		
		public System.Data.Linq.Table<K3> K3s
		{
			get
			{
				return this.GetTable<K3>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<Offer> Offers
		{
			get
			{
				return this.GetTable<Offer>();
			}
		}
		
		public System.Data.Linq.Table<RealEstateAgent> RealEstateAgents
		{
			get
			{
				return this.GetTable<RealEstateAgent>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<Un> Uns
		{
			get
			{
				return this.GetTable<Un>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Entrepreneur")]
	public partial class Entrepreneur : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private EntitySet<Offer> _Offers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Entrepreneur()
		{
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entrepreneur_Offer", Storage="_Offers", ThisKey="id", OtherKey="entrepreneurId")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Entrepreneur = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Entrepreneur = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.House")]
	public partial class House : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _address;
		
		private System.Nullable<double> _basementAreal;
		
		private System.Nullable<double> _bruttoprice;
		
		private System.Nullable<int> _buildingYear;
		
		private System.Nullable<double> _cashPrice;
		
		private string _city;
		
		private System.Nullable<double> _distToSchool;
		
		private System.Nullable<double> _distToShopping;
		
		private string _energyMark;
		
		private System.Nullable<int> _floorLevels;
		
		private System.Nullable<double> _garageKvm;
		
		private System.Nullable<double> _groundAreal;
		
		private System.Nullable<double> _kvmPrice;
		
		private System.Nullable<double> _livingAreal;
		
		private System.Nullable<double> _nettoPrice;
		
		private System.Nullable<int> _rooms;
		
		private System.Nullable<int> _toilets;
		
		private string _webLink;
		
		private System.Nullable<int> _zipCode;
		
		private System.Nullable<int> _realEstateAgent;
		
		private EntitySet<Report> _Reports;
		
		private EntityRef<RealEstateAgent> _RealEstateAgent1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnbasementArealChanging(System.Nullable<double> value);
    partial void OnbasementArealChanged();
    partial void OnbruttopriceChanging(System.Nullable<double> value);
    partial void OnbruttopriceChanged();
    partial void OnbuildingYearChanging(System.Nullable<int> value);
    partial void OnbuildingYearChanged();
    partial void OncashPriceChanging(System.Nullable<double> value);
    partial void OncashPriceChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OndistToSchoolChanging(System.Nullable<double> value);
    partial void OndistToSchoolChanged();
    partial void OndistToShoppingChanging(System.Nullable<double> value);
    partial void OndistToShoppingChanged();
    partial void OnenergyMarkChanging(string value);
    partial void OnenergyMarkChanged();
    partial void OnfloorLevelsChanging(System.Nullable<int> value);
    partial void OnfloorLevelsChanged();
    partial void OngarageKvmChanging(System.Nullable<double> value);
    partial void OngarageKvmChanged();
    partial void OngroundArealChanging(System.Nullable<double> value);
    partial void OngroundArealChanged();
    partial void OnkvmPriceChanging(System.Nullable<double> value);
    partial void OnkvmPriceChanged();
    partial void OnlivingArealChanging(System.Nullable<double> value);
    partial void OnlivingArealChanged();
    partial void OnnettoPriceChanging(System.Nullable<double> value);
    partial void OnnettoPriceChanged();
    partial void OnroomsChanging(System.Nullable<int> value);
    partial void OnroomsChanged();
    partial void OntoiletsChanging(System.Nullable<int> value);
    partial void OntoiletsChanged();
    partial void OnwebLinkChanging(string value);
    partial void OnwebLinkChanged();
    partial void OnzipCodeChanging(System.Nullable<int> value);
    partial void OnzipCodeChanged();
    partial void OnrealEstateAgentChanging(System.Nullable<int> value);
    partial void OnrealEstateAgentChanged();
    #endregion
		
		public House()
		{
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._RealEstateAgent1 = default(EntityRef<RealEstateAgent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(MAX)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_basementAreal", DbType="Float")]
		public System.Nullable<double> basementAreal
		{
			get
			{
				return this._basementAreal;
			}
			set
			{
				if ((this._basementAreal != value))
				{
					this.OnbasementArealChanging(value);
					this.SendPropertyChanging();
					this._basementAreal = value;
					this.SendPropertyChanged("basementAreal");
					this.OnbasementArealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bruttoprice", DbType="Float")]
		public System.Nullable<double> bruttoprice
		{
			get
			{
				return this._bruttoprice;
			}
			set
			{
				if ((this._bruttoprice != value))
				{
					this.OnbruttopriceChanging(value);
					this.SendPropertyChanging();
					this._bruttoprice = value;
					this.SendPropertyChanged("bruttoprice");
					this.OnbruttopriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buildingYear", DbType="Int")]
		public System.Nullable<int> buildingYear
		{
			get
			{
				return this._buildingYear;
			}
			set
			{
				if ((this._buildingYear != value))
				{
					this.OnbuildingYearChanging(value);
					this.SendPropertyChanging();
					this._buildingYear = value;
					this.SendPropertyChanged("buildingYear");
					this.OnbuildingYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cashPrice", DbType="Float")]
		public System.Nullable<double> cashPrice
		{
			get
			{
				return this._cashPrice;
			}
			set
			{
				if ((this._cashPrice != value))
				{
					this.OncashPriceChanging(value);
					this.SendPropertyChanging();
					this._cashPrice = value;
					this.SendPropertyChanged("cashPrice");
					this.OncashPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="NVarChar(MAX)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distToSchool", DbType="Float")]
		public System.Nullable<double> distToSchool
		{
			get
			{
				return this._distToSchool;
			}
			set
			{
				if ((this._distToSchool != value))
				{
					this.OndistToSchoolChanging(value);
					this.SendPropertyChanging();
					this._distToSchool = value;
					this.SendPropertyChanged("distToSchool");
					this.OndistToSchoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distToShopping", DbType="Float")]
		public System.Nullable<double> distToShopping
		{
			get
			{
				return this._distToShopping;
			}
			set
			{
				if ((this._distToShopping != value))
				{
					this.OndistToShoppingChanging(value);
					this.SendPropertyChanging();
					this._distToShopping = value;
					this.SendPropertyChanged("distToShopping");
					this.OndistToShoppingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_energyMark", DbType="NVarChar(MAX)")]
		public string energyMark
		{
			get
			{
				return this._energyMark;
			}
			set
			{
				if ((this._energyMark != value))
				{
					this.OnenergyMarkChanging(value);
					this.SendPropertyChanging();
					this._energyMark = value;
					this.SendPropertyChanged("energyMark");
					this.OnenergyMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_floorLevels", DbType="Int")]
		public System.Nullable<int> floorLevels
		{
			get
			{
				return this._floorLevels;
			}
			set
			{
				if ((this._floorLevels != value))
				{
					this.OnfloorLevelsChanging(value);
					this.SendPropertyChanging();
					this._floorLevels = value;
					this.SendPropertyChanged("floorLevels");
					this.OnfloorLevelsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_garageKvm", DbType="Float")]
		public System.Nullable<double> garageKvm
		{
			get
			{
				return this._garageKvm;
			}
			set
			{
				if ((this._garageKvm != value))
				{
					this.OngarageKvmChanging(value);
					this.SendPropertyChanging();
					this._garageKvm = value;
					this.SendPropertyChanged("garageKvm");
					this.OngarageKvmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groundAreal", DbType="Float")]
		public System.Nullable<double> groundAreal
		{
			get
			{
				return this._groundAreal;
			}
			set
			{
				if ((this._groundAreal != value))
				{
					this.OngroundArealChanging(value);
					this.SendPropertyChanging();
					this._groundAreal = value;
					this.SendPropertyChanged("groundAreal");
					this.OngroundArealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kvmPrice", DbType="Float")]
		public System.Nullable<double> kvmPrice
		{
			get
			{
				return this._kvmPrice;
			}
			set
			{
				if ((this._kvmPrice != value))
				{
					this.OnkvmPriceChanging(value);
					this.SendPropertyChanging();
					this._kvmPrice = value;
					this.SendPropertyChanged("kvmPrice");
					this.OnkvmPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_livingAreal", DbType="Float")]
		public System.Nullable<double> livingAreal
		{
			get
			{
				return this._livingAreal;
			}
			set
			{
				if ((this._livingAreal != value))
				{
					this.OnlivingArealChanging(value);
					this.SendPropertyChanging();
					this._livingAreal = value;
					this.SendPropertyChanged("livingAreal");
					this.OnlivingArealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nettoPrice", DbType="Float")]
		public System.Nullable<double> nettoPrice
		{
			get
			{
				return this._nettoPrice;
			}
			set
			{
				if ((this._nettoPrice != value))
				{
					this.OnnettoPriceChanging(value);
					this.SendPropertyChanging();
					this._nettoPrice = value;
					this.SendPropertyChanged("nettoPrice");
					this.OnnettoPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rooms", DbType="Int")]
		public System.Nullable<int> rooms
		{
			get
			{
				return this._rooms;
			}
			set
			{
				if ((this._rooms != value))
				{
					this.OnroomsChanging(value);
					this.SendPropertyChanging();
					this._rooms = value;
					this.SendPropertyChanged("rooms");
					this.OnroomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toilets", DbType="Int")]
		public System.Nullable<int> toilets
		{
			get
			{
				return this._toilets;
			}
			set
			{
				if ((this._toilets != value))
				{
					this.OntoiletsChanging(value);
					this.SendPropertyChanging();
					this._toilets = value;
					this.SendPropertyChanged("toilets");
					this.OntoiletsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_webLink", DbType="NVarChar(MAX)")]
		public string webLink
		{
			get
			{
				return this._webLink;
			}
			set
			{
				if ((this._webLink != value))
				{
					this.OnwebLinkChanging(value);
					this.SendPropertyChanging();
					this._webLink = value;
					this.SendPropertyChanged("webLink");
					this.OnwebLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zipCode", DbType="Int")]
		public System.Nullable<int> zipCode
		{
			get
			{
				return this._zipCode;
			}
			set
			{
				if ((this._zipCode != value))
				{
					this.OnzipCodeChanging(value);
					this.SendPropertyChanging();
					this._zipCode = value;
					this.SendPropertyChanged("zipCode");
					this.OnzipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_realEstateAgent", DbType="Int")]
		public System.Nullable<int> realEstateAgent
		{
			get
			{
				return this._realEstateAgent;
			}
			set
			{
				if ((this._realEstateAgent != value))
				{
					if (this._RealEstateAgent1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrealEstateAgentChanging(value);
					this.SendPropertyChanging();
					this._realEstateAgent = value;
					this.SendPropertyChanged("realEstateAgent");
					this.OnrealEstateAgentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="House_Report", Storage="_Reports", ThisKey="id", OtherKey="houseId")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RealEstateAgent_House", Storage="_RealEstateAgent1", ThisKey="realEstateAgent", OtherKey="id", IsForeignKey=true)]
		public RealEstateAgent RealEstateAgent1
		{
			get
			{
				return this._RealEstateAgent1.Entity;
			}
			set
			{
				RealEstateAgent previousValue = this._RealEstateAgent1.Entity;
				if (((previousValue != value) 
							|| (this._RealEstateAgent1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RealEstateAgent1.Entity = null;
						previousValue.Houses.Remove(this);
					}
					this._RealEstateAgent1.Entity = value;
					if ((value != null))
					{
						value.Houses.Add(this);
						this._realEstateAgent = value.id;
					}
					else
					{
						this._realEstateAgent = default(Nullable<int>);
					}
					this.SendPropertyChanged("RealEstateAgent1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.House = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.House = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.K0")]
	public partial class K0 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _problem;
		
		private System.Data.Linq.Binary _problemPicture;
		
		private System.Nullable<int> _reportId;
		
		private EntitySet<Offer> _Offers;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnproblemChanging(string value);
    partial void OnproblemChanged();
    partial void OnproblemPictureChanging(System.Data.Linq.Binary value);
    partial void OnproblemPictureChanged();
    partial void OnreportIdChanging(System.Nullable<int> value);
    partial void OnreportIdChanged();
    #endregion
		
		public K0()
		{
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problem", DbType="NVarChar(MAX)")]
		public string problem
		{
			get
			{
				return this._problem;
			}
			set
			{
				if ((this._problem != value))
				{
					this.OnproblemChanging(value);
					this.SendPropertyChanging();
					this._problem = value;
					this.SendPropertyChanged("problem");
					this.OnproblemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problemPicture", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary problemPicture
		{
			get
			{
				return this._problemPicture;
			}
			set
			{
				if ((this._problemPicture != value))
				{
					this.OnproblemPictureChanging(value);
					this.SendPropertyChanging();
					this._problemPicture = value;
					this.SendPropertyChanged("problemPicture");
					this.OnproblemPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reportId", DbType="Int")]
		public System.Nullable<int> reportId
		{
			get
			{
				return this._reportId;
			}
			set
			{
				if ((this._reportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreportIdChanging(value);
					this.SendPropertyChanging();
					this._reportId = value;
					this.SendPropertyChanged("reportId");
					this.OnreportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="K0_Offer", Storage="_Offers", ThisKey="id", OtherKey="k0Id")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_K0", Storage="_Report", ThisKey="reportId", OtherKey="id", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.K0s.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.K0s.Add(this);
						this._reportId = value.id;
					}
					else
					{
						this._reportId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.K0 = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.K0 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.K1")]
	public partial class K1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _problem;
		
		private System.Data.Linq.Binary _problemPicture;
		
		private System.Nullable<int> _reportId;
		
		private EntitySet<Offer> _Offers;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnproblemChanging(string value);
    partial void OnproblemChanged();
    partial void OnproblemPictureChanging(System.Data.Linq.Binary value);
    partial void OnproblemPictureChanged();
    partial void OnreportIdChanging(System.Nullable<int> value);
    partial void OnreportIdChanged();
    #endregion
		
		public K1()
		{
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problem", DbType="NVarChar(MAX)")]
		public string problem
		{
			get
			{
				return this._problem;
			}
			set
			{
				if ((this._problem != value))
				{
					this.OnproblemChanging(value);
					this.SendPropertyChanging();
					this._problem = value;
					this.SendPropertyChanged("problem");
					this.OnproblemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problemPicture", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary problemPicture
		{
			get
			{
				return this._problemPicture;
			}
			set
			{
				if ((this._problemPicture != value))
				{
					this.OnproblemPictureChanging(value);
					this.SendPropertyChanging();
					this._problemPicture = value;
					this.SendPropertyChanged("problemPicture");
					this.OnproblemPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reportId", DbType="Int")]
		public System.Nullable<int> reportId
		{
			get
			{
				return this._reportId;
			}
			set
			{
				if ((this._reportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreportIdChanging(value);
					this.SendPropertyChanging();
					this._reportId = value;
					this.SendPropertyChanged("reportId");
					this.OnreportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="K1_Offer", Storage="_Offers", ThisKey="id", OtherKey="k1Id")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_K1", Storage="_Report", ThisKey="reportId", OtherKey="id", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.K1s.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.K1s.Add(this);
						this._reportId = value.id;
					}
					else
					{
						this._reportId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.K1 = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.K1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.K2")]
	public partial class K2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _problem;
		
		private System.Data.Linq.Binary _problemPicture;
		
		private System.Nullable<int> _reportId;
		
		private EntitySet<Offer> _Offers;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnproblemChanging(string value);
    partial void OnproblemChanged();
    partial void OnproblemPictureChanging(System.Data.Linq.Binary value);
    partial void OnproblemPictureChanged();
    partial void OnreportIdChanging(System.Nullable<int> value);
    partial void OnreportIdChanged();
    #endregion
		
		public K2()
		{
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problem", DbType="NVarChar(MAX)")]
		public string problem
		{
			get
			{
				return this._problem;
			}
			set
			{
				if ((this._problem != value))
				{
					this.OnproblemChanging(value);
					this.SendPropertyChanging();
					this._problem = value;
					this.SendPropertyChanged("problem");
					this.OnproblemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problemPicture", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary problemPicture
		{
			get
			{
				return this._problemPicture;
			}
			set
			{
				if ((this._problemPicture != value))
				{
					this.OnproblemPictureChanging(value);
					this.SendPropertyChanging();
					this._problemPicture = value;
					this.SendPropertyChanged("problemPicture");
					this.OnproblemPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reportId", DbType="Int")]
		public System.Nullable<int> reportId
		{
			get
			{
				return this._reportId;
			}
			set
			{
				if ((this._reportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreportIdChanging(value);
					this.SendPropertyChanging();
					this._reportId = value;
					this.SendPropertyChanged("reportId");
					this.OnreportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="K2_Offer", Storage="_Offers", ThisKey="id", OtherKey="k2Id")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_K2", Storage="_Report", ThisKey="reportId", OtherKey="id", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.K2s.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.K2s.Add(this);
						this._reportId = value.id;
					}
					else
					{
						this._reportId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.K2 = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.K2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.K3")]
	public partial class K3 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _problem;
		
		private System.Data.Linq.Binary _problemPicture;
		
		private System.Nullable<int> _reportId;
		
		private EntitySet<Offer> _Offers;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnproblemChanging(string value);
    partial void OnproblemChanged();
    partial void OnproblemPictureChanging(System.Data.Linq.Binary value);
    partial void OnproblemPictureChanged();
    partial void OnreportIdChanging(System.Nullable<int> value);
    partial void OnreportIdChanged();
    #endregion
		
		public K3()
		{
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problem", DbType="NVarChar(MAX)")]
		public string problem
		{
			get
			{
				return this._problem;
			}
			set
			{
				if ((this._problem != value))
				{
					this.OnproblemChanging(value);
					this.SendPropertyChanging();
					this._problem = value;
					this.SendPropertyChanged("problem");
					this.OnproblemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problemPicture", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary problemPicture
		{
			get
			{
				return this._problemPicture;
			}
			set
			{
				if ((this._problemPicture != value))
				{
					this.OnproblemPictureChanging(value);
					this.SendPropertyChanging();
					this._problemPicture = value;
					this.SendPropertyChanged("problemPicture");
					this.OnproblemPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reportId", DbType="Int")]
		public System.Nullable<int> reportId
		{
			get
			{
				return this._reportId;
			}
			set
			{
				if ((this._reportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreportIdChanging(value);
					this.SendPropertyChanging();
					this._reportId = value;
					this.SendPropertyChanged("reportId");
					this.OnreportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="K3_Offer", Storage="_Offers", ThisKey="id", OtherKey="k3Id")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_K3", Storage="_Report", ThisKey="reportId", OtherKey="id", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.K3s.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.K3s.Add(this);
						this._reportId = value.id;
					}
					else
					{
						this._reportId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.K3 = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.K3 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Login")]
	public partial class Login
	{
		
		private string _company;
		
		private string _password;
		
		private System.Nullable<int> _phoneNumber;
		
		private string _username;
		
		private string _personType;
		
		public Login()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_company", DbType="NVarChar(MAX)")]
		public string company
		{
			get
			{
				return this._company;
			}
			set
			{
				if ((this._company != value))
				{
					this._company = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(MAX)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this._password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="Int")]
		public System.Nullable<int> phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this._phoneNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(MAX)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this._username = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personType", DbType="NVarChar(MAX)")]
		public string personType
		{
			get
			{
				return this._personType;
			}
			set
			{
				if ((this._personType != value))
				{
					this._personType = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Offer")]
	public partial class Offer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _entrepreneurId;
		
		private System.Nullable<int> _k0Id;
		
		private System.Nullable<int> _k1Id;
		
		private System.Nullable<int> _k2Id;
		
		private System.Nullable<int> _k3Id;
		
		private System.Nullable<int> _unId;
		
		private System.Nullable<double> _price;
		
		private EntityRef<Entrepreneur> _Entrepreneur;
		
		private EntityRef<K0> _K0;
		
		private EntityRef<K1> _K1;
		
		private EntityRef<K2> _K2;
		
		private EntityRef<K3> _K3;
		
		private EntityRef<Un> _Un;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnentrepreneurIdChanging(System.Nullable<int> value);
    partial void OnentrepreneurIdChanged();
    partial void Onk0IdChanging(System.Nullable<int> value);
    partial void Onk0IdChanged();
    partial void Onk1IdChanging(System.Nullable<int> value);
    partial void Onk1IdChanged();
    partial void Onk2IdChanging(System.Nullable<int> value);
    partial void Onk2IdChanged();
    partial void Onk3IdChanging(System.Nullable<int> value);
    partial void Onk3IdChanged();
    partial void OnunIdChanging(System.Nullable<int> value);
    partial void OnunIdChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    #endregion
		
		public Offer()
		{
			this._Entrepreneur = default(EntityRef<Entrepreneur>);
			this._K0 = default(EntityRef<K0>);
			this._K1 = default(EntityRef<K1>);
			this._K2 = default(EntityRef<K2>);
			this._K3 = default(EntityRef<K3>);
			this._Un = default(EntityRef<Un>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entrepreneurId", DbType="Int")]
		public System.Nullable<int> entrepreneurId
		{
			get
			{
				return this._entrepreneurId;
			}
			set
			{
				if ((this._entrepreneurId != value))
				{
					if (this._Entrepreneur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentrepreneurIdChanging(value);
					this.SendPropertyChanging();
					this._entrepreneurId = value;
					this.SendPropertyChanged("entrepreneurId");
					this.OnentrepreneurIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_k0Id", DbType="Int")]
		public System.Nullable<int> k0Id
		{
			get
			{
				return this._k0Id;
			}
			set
			{
				if ((this._k0Id != value))
				{
					if (this._K0.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onk0IdChanging(value);
					this.SendPropertyChanging();
					this._k0Id = value;
					this.SendPropertyChanged("k0Id");
					this.Onk0IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_k1Id", DbType="Int")]
		public System.Nullable<int> k1Id
		{
			get
			{
				return this._k1Id;
			}
			set
			{
				if ((this._k1Id != value))
				{
					if (this._K1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onk1IdChanging(value);
					this.SendPropertyChanging();
					this._k1Id = value;
					this.SendPropertyChanged("k1Id");
					this.Onk1IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_k2Id", DbType="Int")]
		public System.Nullable<int> k2Id
		{
			get
			{
				return this._k2Id;
			}
			set
			{
				if ((this._k2Id != value))
				{
					if (this._K2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onk2IdChanging(value);
					this.SendPropertyChanging();
					this._k2Id = value;
					this.SendPropertyChanged("k2Id");
					this.Onk2IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_k3Id", DbType="Int")]
		public System.Nullable<int> k3Id
		{
			get
			{
				return this._k3Id;
			}
			set
			{
				if ((this._k3Id != value))
				{
					if (this._K3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onk3IdChanging(value);
					this.SendPropertyChanging();
					this._k3Id = value;
					this.SendPropertyChanged("k3Id");
					this.Onk3IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unId", DbType="Int")]
		public System.Nullable<int> unId
		{
			get
			{
				return this._unId;
			}
			set
			{
				if ((this._unId != value))
				{
					if (this._Un.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnunIdChanging(value);
					this.SendPropertyChanging();
					this._unId = value;
					this.SendPropertyChanged("unId");
					this.OnunIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entrepreneur_Offer", Storage="_Entrepreneur", ThisKey="entrepreneurId", OtherKey="id", IsForeignKey=true)]
		public Entrepreneur Entrepreneur
		{
			get
			{
				return this._Entrepreneur.Entity;
			}
			set
			{
				Entrepreneur previousValue = this._Entrepreneur.Entity;
				if (((previousValue != value) 
							|| (this._Entrepreneur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entrepreneur.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._Entrepreneur.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._entrepreneurId = value.id;
					}
					else
					{
						this._entrepreneurId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Entrepreneur");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="K0_Offer", Storage="_K0", ThisKey="k0Id", OtherKey="id", IsForeignKey=true)]
		public K0 K0
		{
			get
			{
				return this._K0.Entity;
			}
			set
			{
				K0 previousValue = this._K0.Entity;
				if (((previousValue != value) 
							|| (this._K0.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._K0.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._K0.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._k0Id = value.id;
					}
					else
					{
						this._k0Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("K0");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="K1_Offer", Storage="_K1", ThisKey="k1Id", OtherKey="id", IsForeignKey=true)]
		public K1 K1
		{
			get
			{
				return this._K1.Entity;
			}
			set
			{
				K1 previousValue = this._K1.Entity;
				if (((previousValue != value) 
							|| (this._K1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._K1.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._K1.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._k1Id = value.id;
					}
					else
					{
						this._k1Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("K1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="K2_Offer", Storage="_K2", ThisKey="k2Id", OtherKey="id", IsForeignKey=true)]
		public K2 K2
		{
			get
			{
				return this._K2.Entity;
			}
			set
			{
				K2 previousValue = this._K2.Entity;
				if (((previousValue != value) 
							|| (this._K2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._K2.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._K2.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._k2Id = value.id;
					}
					else
					{
						this._k2Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("K2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="K3_Offer", Storage="_K3", ThisKey="k3Id", OtherKey="id", IsForeignKey=true)]
		public K3 K3
		{
			get
			{
				return this._K3.Entity;
			}
			set
			{
				K3 previousValue = this._K3.Entity;
				if (((previousValue != value) 
							|| (this._K3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._K3.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._K3.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._k3Id = value.id;
					}
					else
					{
						this._k3Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("K3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Un_Offer", Storage="_Un", ThisKey="unId", OtherKey="id", IsForeignKey=true)]
		public Un Un
		{
			get
			{
				return this._Un.Entity;
			}
			set
			{
				Un previousValue = this._Un.Entity;
				if (((previousValue != value) 
							|| (this._Un.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Un.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._Un.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._unId = value.id;
					}
					else
					{
						this._unId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Un");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RealEstateAgent")]
	public partial class RealEstateAgent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private EntitySet<House> _Houses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public RealEstateAgent()
		{
			this._Houses = new EntitySet<House>(new Action<House>(this.attach_Houses), new Action<House>(this.detach_Houses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RealEstateAgent_House", Storage="_Houses", ThisKey="id", OtherKey="realEstateAgent")]
		public EntitySet<House> Houses
		{
			get
			{
				return this._Houses;
			}
			set
			{
				this._Houses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.RealEstateAgent1 = this;
		}
		
		private void detach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.RealEstateAgent1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Report")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _houseId;
		
		private EntitySet<K0> _K0s;
		
		private EntitySet<K1> _K1s;
		
		private EntitySet<K2> _K2s;
		
		private EntitySet<K3> _K3s;
		
		private EntitySet<Un> _Uns;
		
		private EntityRef<House> _House;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnhouseIdChanging(System.Nullable<int> value);
    partial void OnhouseIdChanged();
    #endregion
		
		public Report()
		{
			this._K0s = new EntitySet<K0>(new Action<K0>(this.attach_K0s), new Action<K0>(this.detach_K0s));
			this._K1s = new EntitySet<K1>(new Action<K1>(this.attach_K1s), new Action<K1>(this.detach_K1s));
			this._K2s = new EntitySet<K2>(new Action<K2>(this.attach_K2s), new Action<K2>(this.detach_K2s));
			this._K3s = new EntitySet<K3>(new Action<K3>(this.attach_K3s), new Action<K3>(this.detach_K3s));
			this._Uns = new EntitySet<Un>(new Action<Un>(this.attach_Uns), new Action<Un>(this.detach_Uns));
			this._House = default(EntityRef<House>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_houseId", DbType="Int")]
		public System.Nullable<int> houseId
		{
			get
			{
				return this._houseId;
			}
			set
			{
				if ((this._houseId != value))
				{
					if (this._House.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhouseIdChanging(value);
					this.SendPropertyChanging();
					this._houseId = value;
					this.SendPropertyChanged("houseId");
					this.OnhouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_K0", Storage="_K0s", ThisKey="id", OtherKey="reportId")]
		public EntitySet<K0> K0s
		{
			get
			{
				return this._K0s;
			}
			set
			{
				this._K0s.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_K1", Storage="_K1s", ThisKey="id", OtherKey="reportId")]
		public EntitySet<K1> K1s
		{
			get
			{
				return this._K1s;
			}
			set
			{
				this._K1s.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_K2", Storage="_K2s", ThisKey="id", OtherKey="reportId")]
		public EntitySet<K2> K2s
		{
			get
			{
				return this._K2s;
			}
			set
			{
				this._K2s.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_K3", Storage="_K3s", ThisKey="id", OtherKey="reportId")]
		public EntitySet<K3> K3s
		{
			get
			{
				return this._K3s;
			}
			set
			{
				this._K3s.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_Un", Storage="_Uns", ThisKey="id", OtherKey="reportId")]
		public EntitySet<Un> Uns
		{
			get
			{
				return this._Uns;
			}
			set
			{
				this._Uns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="House_Report", Storage="_House", ThisKey="houseId", OtherKey="id", IsForeignKey=true)]
		public House House
		{
			get
			{
				return this._House.Entity;
			}
			set
			{
				House previousValue = this._House.Entity;
				if (((previousValue != value) 
							|| (this._House.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._House.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._House.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._houseId = value.id;
					}
					else
					{
						this._houseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("House");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_K0s(K0 entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_K0s(K0 entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_K1s(K1 entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_K1s(K1 entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_K2s(K2 entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_K2s(K2 entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_K3s(K3 entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_K3s(K3 entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_Uns(Un entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_Uns(Un entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Un")]
	public partial class Un : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _problem;
		
		private System.Data.Linq.Binary _problemPicture;
		
		private System.Nullable<int> _reportId;
		
		private EntitySet<Offer> _Offers;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnproblemChanging(string value);
    partial void OnproblemChanged();
    partial void OnproblemPictureChanging(System.Data.Linq.Binary value);
    partial void OnproblemPictureChanged();
    partial void OnreportIdChanging(System.Nullable<int> value);
    partial void OnreportIdChanged();
    #endregion
		
		public Un()
		{
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problem", DbType="NVarChar(MAX)")]
		public string problem
		{
			get
			{
				return this._problem;
			}
			set
			{
				if ((this._problem != value))
				{
					this.OnproblemChanging(value);
					this.SendPropertyChanging();
					this._problem = value;
					this.SendPropertyChanged("problem");
					this.OnproblemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problemPicture", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary problemPicture
		{
			get
			{
				return this._problemPicture;
			}
			set
			{
				if ((this._problemPicture != value))
				{
					this.OnproblemPictureChanging(value);
					this.SendPropertyChanging();
					this._problemPicture = value;
					this.SendPropertyChanged("problemPicture");
					this.OnproblemPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reportId", DbType="Int")]
		public System.Nullable<int> reportId
		{
			get
			{
				return this._reportId;
			}
			set
			{
				if ((this._reportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreportIdChanging(value);
					this.SendPropertyChanging();
					this._reportId = value;
					this.SendPropertyChanged("reportId");
					this.OnreportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Un_Offer", Storage="_Offers", ThisKey="id", OtherKey="unId")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_Un", Storage="_Report", ThisKey="reportId", OtherKey="id", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.Uns.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.Uns.Add(this);
						this._reportId = value.id;
					}
					else
					{
						this._reportId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Un = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Un = null;
		}
	}
}
#pragma warning restore 1591
